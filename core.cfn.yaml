AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: |
  Core Services for Souvenirs on AWS

Parameters:
  AppName:
    Description: Name of the App
    Type: String
    Default: souvenirs
  EnvType:
    Description: Environment type
    Type: String
    AllowedValues:
      - prod
      - devel
    Default: devel
  DomainName:
    Description: Custom domain for app
    Type: String
  HostedZoneId:
    Description: Route53 Domain ID
    Type: String

Conditions:
  IsProduction: !Equals
    - !Ref EnvType
    - prod

Resources:
# ====================================== Storage ================================== #
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        -
          - !Sub ${AppName}
          - static
          - !Sub ${EnvType}
          - !Select
            - 2
            - Fn::Split:
              - '/'
              - !Sub ${AWS::StackId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        -
          Key: accounting
          Value: !Sub core-${EnvType}

  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-${EnvType}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        -
          Key: accounting
          Value: !Sub core-${EnvType}
# ======================================= Certs ================================== #
  CoreCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsProduction
        - !Sub ${AppName}.${DomainName}
        - !Sub ${AppName}-devel.${DomainName}
      DomainValidationOptions:
        -
          DomainName: !If
            - IsProduction
            - !Sub ${AppName}.${DomainName}
            - !Sub ${AppName}-devel.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  AuthCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If
        - IsProduction
        - !Sub auth.${AppName}.${DomainName}
        - !Sub auth.${AppName}-devel.${DomainName}
      DomainValidationOptions:
        -
          DomainName: !If
            - IsProduction
            - !Sub auth.${AppName}.${DomainName}
            - !Sub auth.${AppName}-devel.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${AWS::StackName}'

# ====================================== Policies ================================== #
  StaticWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join
              - ''
              -
                - !GetAtt StaticWebsiteBucket.Arn
                - '/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CognitoSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-SNS-${EnvType}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:publish
                Resource: '*'

  AllowPhotoBucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AppName}${EnvType}AllowUserPhotoBucketAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt PhotoBucket.Arn
            Condition:
              StringLike:
                "s3:prefix":
                  - ${cognito-identity.amazonaws.com:sub}
                  - family
          -
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Join
                - ''
                - - !GetAtt PhotoBucket.Arn
                  - '/{cognito-identity.amazonaws.com:sub}'
              - !Join
                - ''
                - - !GetAtt PhotoBucket.Arn
                  - '/{cognito-identity.amazonaws.com:sub}/*'
              - !Join
                - ''
                - - !GetAtt PhotoBucket.Arn
                  - '/family'
              - !Join
                - ''
                - - !GetAtt PhotoBucket.Arn
                  - '/family/*'

      Roles:
        - !Ref CognitoAuthorizedRole

  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
              - sts:TagSession
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated

# ================================== Essential Lambdas ============================== #
  LambdaEdgeFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: 'AllowLambdaServiceToAssumeRole'
            Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
              - 'lambda.amazonaws.com'
              - 'edgelambda.amazonaws.com'

  LambdaEdgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: 'nodejs12.x'
      Timeout: 25
      InlineCode: |
        'use strict';
        exports.handler = (event, context, callback) => {

            //Get contents of response
            const response = event.Records[0].cf.response;
            const headers = response.headers;

        //Set new headers
        headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubdomains; preload'}];
        headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"}];
        headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
        headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
        headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
        headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

            //Return modified response
            callback(null, response);
        };
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaEdgeFunction
      Description: v1

# ================================== Static Web Services ================================ #
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If
            - IsProduction
            - !Sub '${AppName}.${DomainName}'
            - !Sub '${AppName}-devel.${DomainName}'
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          LambdaFunctionAssociations:
            -
              EventType: origin-response
              LambdaFunctionARN: !Ref LambdaVersion
          ViewerProtocolPolicy: 'redirect-to-https'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt StaticWebsiteBucket.DomainName
            Id: !Sub 'S3-${AWS::StackName}-root'
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CoreCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only

# ==================================== DNS ================================ #
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      RecordSets:
      - Name: !If
          - IsProduction
          - !Sub '${AppName}.${DomainName}'
          - !Sub '${AppName}-devel.${DomainName}'
        Type: 'A'
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          EvaluateTargetHealth: false
          HostedZoneId: 'Z2FDTNDATAQYW2'

# ============================== Authentication ============================ #
  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    Properties:
      UserPoolName: !Sub ${AppName}-${EnvType}
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      MfaConfiguration: 'ON'
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
        - SMS_MFA
      SmsConfiguration:
        ExternalId: !Sub ${AppName}-${EnvType}-external
        SnsCallerArn: !GetAtt CognitoSNSRole.Arn
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      Policies:
        PasswordPolicy:
            MinimumLength: 14
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          -
            Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
        - phone_number
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AppName}-ClientPool-${EnvType}
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
          - code
          - !If
            - IsProduction
            - AWS::NoValue
            - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - !If
          - IsProduction
          - !Sub 'https://${AppName}.${DomainName}/authentication/login-callback'
          - !Sub 'https://${AppName}-devel.${DomainName}/authentication/login-callback'
        - !If
          - IsProduction
          - AWS::NoValue
          - 'http://localhost:5000/authentication/login-callback'
      LogoutURLs:
        - !If
          - IsProduction
          - !Sub 'https://${AppName}.${DomainName}/authentication/logout-callback'
          - !Sub 'https://${AppName}-devel.${DomainName}/authentication/logout-callback'
        - !If
          - IsProduction
          - AWS::NoValue
          - 'http://localhost:5000/authentication/logout-callback'
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !If
        - IsProduction
        - !Sub auth.${AppName}.${DomainName}
        - !Sub auth.${AppName}-devel.${DomainName}
      CustomDomainConfig:
        CertificateArn: !Ref AuthCertificate

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${AppName}-${EnvType}-IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        -
          ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
